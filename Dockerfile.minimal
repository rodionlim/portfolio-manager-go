# Build stage for frontend
FROM node:18-alpine AS frontend-builder

WORKDIR /app/web/ui

# Copy package files and install dependencies
COPY web/ui/package*.json ./
RUN npm ci

# Copy frontend source and build
COPY web/ui/ ./
RUN npm run build

# Build stage for backend
FROM golang:1.24.3-alpine AS backend-builder

# Install necessary tools for asset compression
RUN apk add --no-cache bash gzip

WORKDIR /app

# Copy go mod files and download dependencies
COPY go.mod go.sum ./
RUN go mod download

# Install swag for API documentation generation
RUN go install github.com/swaggo/swag/cmd/swag@latest

# Copy source code
COPY . .

# Copy built frontend assets from the frontend builder
COPY --from=frontend-builder /app/web/ui/dist ./web/ui/dist

# Generate swagger documentation
RUN swag init --quiet -g cmd/portfolio/main.go

# Compress assets and build the application (static binary)
RUN cd web/ui && \
    cp embed.go.tmpl embed.go && \
    mkdir -p static && \
    find static -type f -name '*.gz' -delete && \
    find dist -type f ! -name '*.gz' -exec bash -c 'for file; do dest="${file#dist}"; mkdir -p "static/$(dirname "$dest")"; gzip -fk "$file" -c > "static/${dest}.gz"; done' bash {} + && \
    find static -type f -name '*.gz' -print0 | sort -z | xargs -0 echo //go:embed >> embed.go && \
    echo var EmbedFS embed.FS >> embed.go && \
    cd ../.. && \
    CGO_ENABLED=0 GOOS=linux go build -tags builtinassets -a -installsuffix cgo -o portfolio-manager ./cmd/portfolio

# Runtime stage - minimal image
FROM scratch

# Copy ca-certificates from a trusted source
COPY --from=backend-builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=backend-builder /app/portfolio-manager /portfolio-manager

# Copy default config for reference
COPY --from=backend-builder /app/config.yaml /config.yaml.example

# Expose ports
EXPOSE 8080 8081

# Run the application
CMD ["/portfolio-manager", "-config", "/config/config.yaml"]