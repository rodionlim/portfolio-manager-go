// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/api/v1/blotter/export": {
            "get": {
                "description": "Export all trades to a CSV file",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Export trades to CSV",
                "responses": {
                    "200": {
                        "description": "trades.csv",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Failed to export trades",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/import": {
            "post": {
                "description": "Import trades from a CSV file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Import trades from CSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to get file from request",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to import trades",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/trade": {
            "get": {
                "description": "Retrieve all trades from the blotter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Get all trades",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blotter.Trade"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a trade in the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Update a trade",
                "parameters": [
                    {
                        "description": "Trade Request",
                        "name": "trade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blotter.TradeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blotter.Trade"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update trade",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new trade to the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Add a new trade",
                "parameters": [
                    {
                        "description": "Trade Request",
                        "name": "trade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blotter.TradeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blotter.Trade"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add trade",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all trades by ids from the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Delete all trades by ids",
                "parameters": [
                    {
                        "description": "Trade IDs",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "$ref": "#/definitions/blotter.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete trades",
                        "schema": {
                            "$ref": "#/definitions/blotter.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dividends": {
            "post": {
                "description": "Get dividends for a single ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dividends"
                ],
                "summary": "Get dividends for a single ticker",
                "parameters": [
                    {
                        "description": "Ticker symbol",
                        "name": "ticker",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dividends.Dividends"
                            }
                        }
                    },
                    "400": {
                        "description": "ticker is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "failed to calculate dividends",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/dividend/{ticker}": {
            "get": {
                "description": "Retrieves dividend history data for a specified stock ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get dividend metadata for a ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ticker symbol",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dividend data for the ticker",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad request - Ticker is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/price/{ticker}": {
            "get": {
                "description": "Retrieves current market data for a specified ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get market data for a single ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticker symbol (see reference data)",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Market data for the ticker",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad request - Ticker is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/tickers/price": {
            "get": {
                "description": "Retrieves current market data for multiple asset tickers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get market data for multiple tickers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of asset ticker symbols",
                        "name": "tickers",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Market data for all requested tickers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - Tickers query parameter is required",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/portfolio/positions": {
            "get": {
                "description": "Retrieves all positions currently in the portfolio",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "portfolio"
                ],
                "summary": "Get all portfolio positions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/portfolio.Position"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/refdata": {
            "get": {
                "description": "Retrieves all reference data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Get reference data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/refdata/export": {
            "get": {
                "description": "Exports reference data in yaml format",
                "produces": [
                    "application/x-yaml"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Export reference data",
                "responses": {
                    "200": {
                        "description": "refdata.yaml",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        }
    },
    "definitions": {
        "blotter.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "blotter.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "blotter.Trade": {
            "type": "object",
            "required": [
                "Account",
                "Broker",
                "Price",
                "Quantity",
                "Side",
                "Ticker",
                "TradeDate",
                "Trader"
            ],
            "properties": {
                "Account": {
                    "description": "Account associated with the trade (CDP, MIP, Custodian)",
                    "type": "string"
                },
                "Broker": {
                    "description": "Broker who executed the trade",
                    "type": "string"
                },
                "Price": {
                    "description": "Price per unit of the asset",
                    "type": "number"
                },
                "Quantity": {
                    "description": "Quantity of the asset",
                    "type": "number"
                },
                "SeqNum": {
                    "description": "Sequence number",
                    "type": "integer"
                },
                "Side": {
                    "description": "Buy or Sell",
                    "type": "string"
                },
                "Ticker": {
                    "description": "Ticker symbol of the asset",
                    "type": "string"
                },
                "TradeDate": {
                    "description": "Date and time of the trade",
                    "type": "string"
                },
                "TradeID": {
                    "description": "Unique identifier for the trade",
                    "type": "string"
                },
                "Trader": {
                    "description": "Trader who executed the trade",
                    "type": "string"
                },
                "Yield": {
                    "description": "Yield of the asset",
                    "type": "number"
                }
            }
        },
        "blotter.TradeRequest": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "broker": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "seqNum": {
                    "description": "Sequence number",
                    "type": "integer"
                },
                "side": {
                    "type": "string"
                },
                "ticker": {
                    "type": "string"
                },
                "tradeDate": {
                    "type": "string"
                },
                "trader": {
                    "type": "string"
                },
                "yield": {
                    "type": "number"
                }
            }
        },
        "dividends.Dividends": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amountPerShare": {
                    "type": "number"
                },
                "exDate": {
                    "type": "string"
                }
            }
        },
        "portfolio.Position": {
            "type": "object",
            "properties": {
                "assetClass": {
                    "type": "string"
                },
                "assetSubClass": {
                    "type": "string"
                },
                "avgPx": {
                    "type": "number"
                },
                "ccy": {
                    "type": "string"
                },
                "dividends": {
                    "type": "number"
                },
                "mv": {
                    "type": "number"
                },
                "pnL": {
                    "type": "number"
                },
                "qty": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "totalPaid": {
                    "type": "number"
                },
                "trader": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "Portfolio Manager API",
	Description:      "This is a server for a portfolio manager.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
