{
    "swagger": "2.0",
    "info": {
        "description": "This is a server for a portfolio manager.",
        "title": "Portfolio Manager API",
        "contact": {},
        "version": "1.0"
    },
    "host": "localhost:8080",
    "basePath": "/",
    "paths": {
        "/api/v1/analytics/analyze": {
            "post": {
                "description": "Analyzes an existing file in the data directory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Analyze existing file",
                "parameters": [
                    {
                        "description": "File analysis request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/analytics.AnalyzeFileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analytics.ReportAnalysis"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/analyze_latest": {
            "get": {
                "description": "Downloads and analyzes the latest N SGX reports from SGX. Optionally filter by report type and force reanalysis.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Analyze latest N SGX reports",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of latest reports to analyze",
                        "name": "n",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Report type filter (e.g., 'fund%20flow', 'daily%20momentum'). If not provided, analyzes all types.",
                        "name": "type",
                        "in": "query"
                    },
                    {
                        "type": "boolean",
                        "description": "Force reanalysis even if analysis exists in database (default: false)",
                        "name": "force",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of analysis results",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analytics.ReportAnalysis"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/download": {
            "get": {
                "description": "Downloads the latest N SGX reports from SGX and stores them in the data directory. Optionally filter by report type.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Download latest N SGX reports",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of latest reports to download",
                        "name": "n",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Report type filter (e.g., 'fund%20flow', 'daily%20momentum'). If not provided, downloads all types.",
                        "name": "type",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of downloaded report file paths",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/latest": {
            "get": {
                "description": "Fetches the latest SGX report of a specific type, downloads it, and provides AI analysis",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Get latest SGX report analysis by type",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Report type (e.g., 'fund%20flow', 'daily%20momentum')",
                        "name": "type",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/analytics.ReportAnalysis"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/list": {
            "get": {
                "description": "Lists all available SGX reports in the data directory",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "List all available SGX reports",
                "responses": {
                    "200": {
                        "description": "List of report file paths",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/list_analysis": {
            "get": {
                "description": "Lists all analysis reports that were previously stored in the database",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "List all available analysis reports",
                "responses": {
                    "200": {
                        "description": "List of analysis reports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analytics.ReportAnalysis"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/most_traded_stocks": {
            "get": {
                "description": "Filters for SGX Fund Flow Weekly Tracker reports and extracts the \"100 Most Traded Stocks\" worksheet data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Extract 100 Most Traded Stocks data from SGX Fund Flow reports",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit results to latest n reports (0 or not provided means no limit)",
                        "name": "n",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of 100 Most Traded Stocks reports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analytics.MostTradedStocksReport"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/sector_funds_flow": {
            "get": {
                "description": "Filters for SGX Fund Flow Weekly Tracker reports and extracts the \"Institutional\" worksheet data showing weekly institutional flow by sector",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Extract Institutional sector funds flow data from SGX Fund Flow reports",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit results to latest n reports (0 or not provided means no limit)",
                        "name": "n",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of sector funds flow reports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analytics.SectorFundsFlowReport"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/analytics/top10_stocks": {
            "get": {
                "description": "Filters for SGX Fund Flow Weekly Tracker reports and extracts the \"Weekly Top 10\" worksheet data showing institutional and retail top 10 net buy/sell stocks",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "analytics"
                ],
                "summary": "Extract Weekly Top 10 stocks data from SGX Fund Flow reports",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Limit results to latest n reports (0 or not provided means no limit)",
                        "name": "n",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of Weekly Top 10 stocks reports",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/analytics.Top10WeeklyReport"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/export": {
            "get": {
                "description": "Export all trades to a CSV file",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Export trades to CSV",
                "responses": {
                    "200": {
                        "description": "trades_YYYYMMDD.csv",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Failed to export trades",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/export-with-fx": {
            "get": {
                "description": "Export all trades as CSV with FX rates inferred where missing",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Export trades with inferred FX rates",
                "responses": {
                    "200": {
                        "description": "trades_with_fx.csv",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Failed to export trades",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/fx": {
            "get": {
                "description": "Get current FX rates for all currencies in blotter trades",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "fx"
                ],
                "summary": "Get current FX rates",
                "responses": {
                    "200": {
                        "description": "Map of currencies to their current FX rates",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to fetch FX rates",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/import": {
            "post": {
                "description": "Import trades from a CSV file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Import trades from CSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Failed to get file from request",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to import trades",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/import-ui": {
            "post": {
                "description": "Import trades from a CSV file uploaded from the UI",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Import trades from CSV upload",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Trades imported successfully",
                        "schema": {
                            "$ref": "#/definitions/common.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid file or format",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Server error processing import",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/trade": {
            "get": {
                "description": "Retrieve all trades from the blotter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Get all trades",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/blotter.Trade"
                            }
                        }
                    }
                }
            },
            "put": {
                "description": "Update a trade in the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Update a trade",
                "parameters": [
                    {
                        "description": "Trade Request",
                        "name": "trade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blotter.TradeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blotter.Trade"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update trade",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new trade to the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Add a new trade",
                "parameters": [
                    {
                        "description": "Trade Request",
                        "name": "trade",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/blotter.TradeRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/blotter.Trade"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to add trade",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete all trades by ids from the blotter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Delete all trades by ids",
                "parameters": [
                    {
                        "description": "Trade IDs",
                        "name": "ids",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "$ref": "#/definitions/common.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete trades",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/blotter/trade/all": {
            "delete": {
                "description": "Delete all trades from the blotter",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "trades"
                ],
                "summary": "Delete all trades",
                "responses": {
                    "200": {
                        "description": "message",
                        "schema": {
                            "$ref": "#/definitions/common.SuccessResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete all trades",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dividends": {
            "get": {
                "description": "Get dividends for all tickers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dividends"
                ],
                "summary": "Get dividends for all tickers",
                "responses": {
                    "200": {
                        "description": "Mapping of ticker to dividends",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "$ref": "#/definitions/dividends.Dividends"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "failed to calculate dividends",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/dividends/{ticker}": {
            "get": {
                "description": "Get dividends for a single ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "dividends"
                ],
                "summary": "Get dividends for a single ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ticker symbol",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/dividends.Dividends"
                            }
                        }
                    },
                    "500": {
                        "description": "failed to calculate dividends",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics": {
            "get": {
                "description": "Get all historical portfolio metrics (date-stamped portfolio metrics), optionally filtered by book",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Get historical portfolio metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metrics by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of historical portfolio metrics by date",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/historical.TimestampedMetrics"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get historical metrics",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Insert or update a single historical portfolio metric (date-stamped portfolio metric), optionally filtered by book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Upsert a historical portfolio metric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metric by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    },
                    {
                        "description": "Historical metric",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/historical.TimestampedMetrics"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/historical.TimestampedMetrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to upsert historical metric",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Insert or update a single historical portfolio metric (date-stamped portfolio metric), optionally filtered by book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Upsert a historical portfolio metric",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metric by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    },
                    {
                        "description": "Historical metric",
                        "name": "metric",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/historical.TimestampedMetrics"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/historical.TimestampedMetrics"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to upsert historical metric",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/delete": {
            "post": {
                "description": "Delete one or more historical portfolio metrics by their timestamps, optionally filtered by book",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Delete historical portfolio metrics",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metrics by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    },
                    {
                        "description": "List of timestamps to delete",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/historical.DeleteMetricsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Result of the deletion operation",
                        "schema": {
                            "$ref": "#/definitions/historical.DeleteMetricsResponse"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete historical metrics",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/export": {
            "get": {
                "description": "Export all historical portfolio metrics (date-stamped portfolio metrics) as a CSV file",
                "produces": [
                    "text/csv"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Export historical portfolio metrics as CSV",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metrics by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV file with historical metrics",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to export historical metrics",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/import": {
            "post": {
                "description": "Import historical portfolio metrics (date-stamped portfolio metrics) from a CSV file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Import historical portfolio metrics from CSV",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file to import",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Import result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid file or format",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to import historical metrics",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/jobs": {
            "get": {
                "description": "List all custom metrics jobs (excluding the default portfolio job)",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "List all custom metrics jobs",
                "responses": {
                    "200": {
                        "description": "List of custom metrics jobs",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/historical.MetricsJob"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to list metrics jobs",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "post": {
                "description": "Create a new custom metrics job with a cron expression and book filter",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Create a custom metrics job",
                "parameters": [
                    {
                        "description": "Metrics job request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/historical.CreateMetricsJobRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created metrics job",
                        "schema": {
                            "$ref": "#/definitions/historical.MetricsJob"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to create metrics job",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/jobs/all": {
            "get": {
                "description": "List all custom metrics jobs and include a dummy portfolio job for UI purposes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "List all metrics jobs including portfolio job",
                "responses": {
                    "200": {
                        "description": "List of all metrics jobs including portfolio",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/historical.MetricsJob"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to list metrics jobs",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/jobs/{bookFilter}": {
            "delete": {
                "description": "Delete a custom metrics job by book filter",
                "tags": [
                    "historical"
                ],
                "summary": "Delete a custom metrics job",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book filter",
                        "name": "bookFilter",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Metrics job deleted successfully"
                    },
                    "400": {
                        "description": "Invalid book filter",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Metrics job not found",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete metrics job",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/historical/metrics/trigger": {
            "post": {
                "description": "Manually trigger metrics collection for a specific book or entire portfolio",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "historical"
                ],
                "summary": "Manually trigger metrics collection",
                "parameters": [
                    {
                        "description": "Trigger metrics collection request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/historical.TriggerMetricsCollectionRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Metrics collection triggered successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to trigger metrics collection",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/dividends/import": {
            "post": {
                "description": "Handles the import of dividend data from an uploaded CSV file for a multiple tickers",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Import dividend data from CSV stream",
                "parameters": [
                    {
                        "type": "file",
                        "description": "CSV file containing dividend data",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully imported dividends data",
                        "schema": {
                            "$ref": "#/definitions/common.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid form data",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/dividends/{ticker}": {
            "get": {
                "description": "Retrieves dividend history data for a specified stock ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get dividend metadata for a ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ticker symbol",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dividend data for the ticker",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad request - Ticker is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Stores user-provided dividend history data for a specified stock ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Store custom dividend metadata for a ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Asset ticker symbol",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Array of dividend metadata to store",
                        "name": "dividend_data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.DividendsMetadata"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Dividends metadata stored successfully",
                        "schema": {
                            "$ref": "#/definitions/common.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad request - Ticker is required or invalid request body",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/interest-rates/{country}": {
            "get": {
                "description": "Retrieves benchmark interest rates for a specified country",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get benchmark interest rates for a country",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Country code (e.g., SG for Singapore)",
                        "name": "country",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of recent records to return (default: 250)",
                        "name": "points",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Benchmark interest rates for the country",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.InterestRates"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/price/historical/{ticker}": {
            "get": {
                "description": "Retrieves historical price data for a specified ticker between start and end dates",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get historical price data for a ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticker symbol (see reference data)",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Start date in YYYYMMDD format",
                        "name": "start",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "End date in YYYYMMDD format (defaults to today)",
                        "name": "end",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Historical price data for the ticker",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/types.AssetData"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad request - Invalid parameters",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/price/{ticker}": {
            "get": {
                "description": "Retrieves current market data for a specified ticker",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get market data for a single ticker",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Ticker symbol (see reference data)",
                        "name": "ticker",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Market data for the ticker",
                        "schema": {}
                    },
                    "400": {
                        "description": "Bad request - Ticker is required",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/mdata/tickers/price": {
            "get": {
                "description": "Retrieves current market data for multiple asset tickers",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "market-data"
                ],
                "summary": "Get market data for multiple tickers",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Comma-separated list of asset ticker symbols",
                        "name": "tickers",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Market data for all requested tickers",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad request - Tickers query parameter is required",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/api/v1/metrics": {
            "get": {
                "description": "Get the Internal Rate of Return (IRR), MV, Price Paid for the entire portfolio or a specific book",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "metrics"
                ],
                "summary": "Get portfolio IRR",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter metrics by book (optional)",
                        "name": "book_filter",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The portfolio metrics, including IRR, cash flows and others",
                        "schema": {
                            "$ref": "#/definitions/metrics.MetricsResult"
                        }
                    },
                    "500": {
                        "description": "Failed to calculate portoflio metrics",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/portfolio/cleanup": {
            "post": {
                "description": "Closes positions that have expired without a corresponding closure trade",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "portfolio"
                ],
                "summary": "Close positions that have expired",
                "responses": {
                    "200": {
                        "description": "Trade Ids of closed trades",
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to auto close positions",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/portfolio/position": {
            "delete": {
                "description": "Deletes a single position by book and ticker",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "portfolio"
                ],
                "summary": "Delete a single portfolio position",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Book name",
                        "name": "book",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Ticker symbol",
                        "name": "ticker",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Position deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Missing required parameters",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "404": {
                        "description": "Position not found",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to delete position",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/portfolio/positions": {
            "get": {
                "description": "Retrieves all positions currently in the portfolio",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "portfolio"
                ],
                "summary": "Get all portfolio positions",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/portfolio.Position"
                            }
                        }
                    },
                    "500": {
                        "description": "Failed to get positions",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "delete": {
                "description": "Deletes all positions currently in the portfolio",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "portfolio"
                ],
                "summary": "Delete all portfolio positions",
                "responses": {
                    "200": {
                        "description": "Positions deleted successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Failed to delete positions",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/api/v1/refdata": {
            "get": {
                "description": "Retrieves all reference data",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Get reference data",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "put": {
                "description": "Updates reference data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Update reference data",
                "parameters": [
                    {
                        "description": "Reference data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rdata.TickerReference"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/rdata.TickerReference"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "post": {
                "description": "Adds reference data",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Add reference data",
                "parameters": [
                    {
                        "description": "Reference data",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/rdata.TickerReference"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            },
            "delete": {
                "description": "Deletes reference data by id",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Delete reference data",
                "parameters": [
                    {
                        "description": "Reference data ids (underlying tickers)",
                        "name": "body",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rdata.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/refdata/export": {
            "get": {
                "description": "Exports reference data in yaml format",
                "produces": [
                    "application/x-yaml"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Export reference data",
                "responses": {
                    "200": {
                        "description": "refdata.yaml",
                        "schema": {
                            "type": "file"
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/refdata/import": {
            "post": {
                "description": "Imports reference data from a YAML file",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Reference"
                ],
                "summary": "Import reference data",
                "parameters": [
                    {
                        "type": "file",
                        "description": "YAML file",
                        "name": "file",
                        "in": "formData",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/rdata.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {}
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {}
                    }
                }
            }
        },
        "/api/v1/user/profile": {
            "get": {
                "description": "Retrieves the current user profile information",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Get user profile",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.Profile"
                        }
                    },
                    "500": {
                        "description": "Failed to get user profile",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            },
            "put": {
                "description": "Updates the user profile information",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "user"
                ],
                "summary": "Update user profile",
                "parameters": [
                    {
                        "description": "User profile data",
                        "name": "profile",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/user.UpdateProfileRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/user.Profile"
                        }
                    },
                    "400": {
                        "description": "Invalid request body or validation error",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to update user profile",
                        "schema": {
                            "$ref": "#/definitions/common.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/healthz": {
            "get": {
                "description": "Returns a simple message to indicate that the server is up and running",
                "produces": [
                    "text/plain"
                ],
                "tags": [
                    "health"
                ],
                "summary": "Health check",
                "responses": {
                    "200": {
                        "description": "I'm up!",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "analytics.AnalyzeFileRequest": {
            "type": "object",
            "required": [
                "filePath"
            ],
            "properties": {
                "filePath": {
                    "type": "string"
                }
            }
        },
        "analytics.MostTradedStock": {
            "type": "object",
            "properties": {
                "institutionNetBuySellChange": {
                    "description": "Change from previous report",
                    "type": "number"
                },
                "past5SessionsInstitutionNetSGDM": {
                    "type": "number"
                },
                "sector": {
                    "type": "string"
                },
                "stockCode": {
                    "type": "string"
                },
                "stockName": {
                    "type": "string"
                },
                "ytdAvgDailyTurnoverSGDM": {
                    "type": "number"
                },
                "ytdInstitutionNetBuySellSGDM": {
                    "type": "number"
                }
            }
        },
        "analytics.MostTradedStocksReport": {
            "type": "object",
            "properties": {
                "extractedAt": {
                    "type": "integer"
                },
                "filePath": {
                    "type": "string"
                },
                "reportDate": {
                    "type": "string"
                },
                "reportTitle": {
                    "type": "string"
                },
                "stocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.MostTradedStock"
                    }
                }
            }
        },
        "analytics.ReportAnalysis": {
            "type": "object",
            "properties": {
                "analysisDate": {
                    "type": "integer"
                },
                "filePath": {
                    "type": "string"
                },
                "keyInsights": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "metadata": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "string"
                    }
                },
                "reportDate": {
                    "type": "integer"
                },
                "reportTitle": {
                    "type": "string"
                },
                "reportType": {
                    "type": "string"
                },
                "summary": {
                    "type": "string"
                }
            }
        },
        "analytics.SectorFlow": {
            "type": "object",
            "properties": {
                "netBuySellSGDM": {
                    "type": "number"
                },
                "sectorName": {
                    "type": "string"
                }
            }
        },
        "analytics.SectorFundsFlowReport": {
            "type": "object",
            "properties": {
                "extractedAt": {
                    "type": "integer"
                },
                "filePath": {
                    "type": "string"
                },
                "overallNetBuySell": {
                    "type": "number"
                },
                "reportDate": {
                    "type": "string"
                },
                "reportTitle": {
                    "type": "string"
                },
                "sectorFlows": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.SectorFlow"
                    }
                },
                "weekEndingDate": {
                    "type": "string"
                }
            }
        },
        "analytics.Top10Stock": {
            "type": "object",
            "properties": {
                "investorType": {
                    "description": "\"institutional\" or \"retail\"",
                    "type": "string"
                },
                "isNetBuy": {
                    "description": "true for net buy, false for net sell",
                    "type": "boolean"
                },
                "netBuySellSGDM": {
                    "type": "number"
                },
                "stockCode": {
                    "type": "string"
                },
                "stockName": {
                    "type": "string"
                }
            }
        },
        "analytics.Top10WeeklyReport": {
            "type": "object",
            "properties": {
                "extractedAt": {
                    "type": "integer"
                },
                "filePath": {
                    "type": "string"
                },
                "institutionalNetSellPreviousSGDM": {
                    "type": "number"
                },
                "institutionalNetSellTotalSGDM": {
                    "type": "number"
                },
                "reportDate": {
                    "type": "string"
                },
                "reportTitle": {
                    "type": "string"
                },
                "retailNetBuyPreviousSGDM": {
                    "type": "number"
                },
                "retailNetBuyTotalSGDM": {
                    "type": "number"
                },
                "top10Stocks": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/analytics.Top10Stock"
                    }
                },
                "weekEndingDate": {
                    "type": "string"
                }
            }
        },
        "blotter.Trade": {
            "type": "object",
            "required": [
                "Account",
                "Book",
                "Broker",
                "Quantity",
                "Side",
                "Ticker",
                "TradeDate"
            ],
            "properties": {
                "Account": {
                    "description": "Account associated with the trade (CDP, MIP, Custodian)",
                    "type": "string"
                },
                "Book": {
                    "description": "Book associated with the trade",
                    "type": "string"
                },
                "Broker": {
                    "description": "Broker who executed the trade",
                    "type": "string"
                },
                "Fx": {
                    "description": "FX rate for the trade",
                    "type": "number"
                },
                "OrigTradeID": {
                    "description": "Original trade ID to link auto closed trades to the original trade",
                    "type": "string"
                },
                "Price": {
                    "description": "Price per unit of the asset",
                    "type": "number",
                    "minimum": 0
                },
                "Quantity": {
                    "description": "Quantity of the asset",
                    "type": "number"
                },
                "SeqNum": {
                    "description": "Sequence number",
                    "type": "integer"
                },
                "Side": {
                    "description": "Buy or Sell",
                    "type": "string"
                },
                "Status": {
                    "description": "Status of the trade (e.g. Open, AutoClosed, Closed), autoclosed if the trade is closed by the system automatically upon expiry (e.g. MAS Bills), closed if the trade is closed manually",
                    "type": "string"
                },
                "Ticker": {
                    "description": "Ticker symbol of the asset",
                    "type": "string"
                },
                "TradeDate": {
                    "description": "Date and time of the trade",
                    "type": "string"
                },
                "TradeID": {
                    "description": "Unique identifier for the trade",
                    "type": "string"
                },
                "Yield": {
                    "description": "Yield of the asset",
                    "type": "number"
                }
            }
        },
        "blotter.TradeRequest": {
            "type": "object",
            "properties": {
                "account": {
                    "type": "string"
                },
                "book": {
                    "type": "string"
                },
                "broker": {
                    "type": "string"
                },
                "fx": {
                    "type": "number"
                },
                "id": {
                    "type": "string"
                },
                "origTradeID": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "quantity": {
                    "type": "number"
                },
                "seqNum": {
                    "description": "Sequence number",
                    "type": "integer"
                },
                "side": {
                    "type": "string"
                },
                "status": {
                    "type": "string"
                },
                "ticker": {
                    "type": "string"
                },
                "tradeDate": {
                    "type": "string"
                },
                "yield": {
                    "type": "number"
                }
            }
        },
        "common.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "common.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "dividends.Dividends": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "amountPerShare": {
                    "type": "number"
                },
                "exDate": {
                    "type": "string"
                },
                "qty": {
                    "type": "number"
                }
            }
        },
        "historical.CreateMetricsJobRequest": {
            "type": "object",
            "properties": {
                "bookFilter": {
                    "description": "Required",
                    "type": "string"
                },
                "cronExpr": {
                    "description": "Optional, uses default if empty",
                    "type": "string"
                }
            }
        },
        "historical.DeleteMetricsRequest": {
            "type": "object",
            "properties": {
                "timestamps": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "historical.DeleteMetricsResponse": {
            "type": "object",
            "properties": {
                "deleted": {
                    "type": "integer"
                },
                "failed": {
                    "type": "integer"
                },
                "failures": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            }
        },
        "historical.MetricsJob": {
            "type": "object",
            "properties": {
                "bookFilter": {
                    "description": "Filter for specific book",
                    "type": "string"
                },
                "cronExpr": {
                    "description": "Cron expression for scheduling",
                    "type": "string"
                },
                "taskId": {
                    "type": "string"
                }
            }
        },
        "historical.TimestampedMetrics": {
            "type": "object",
            "properties": {
                "metrics": {
                    "$ref": "#/definitions/metrics.MetricsResult"
                },
                "timestamp": {
                    "description": "Only the date portion of this field will be used",
                    "type": "string"
                }
            }
        },
        "historical.TriggerMetricsCollectionRequest": {
            "type": "object",
            "properties": {
                "bookFilter": {
                    "description": "Optional, empty for entire portfolio",
                    "type": "string"
                }
            }
        },
        "metrics.MetricsResult": {
            "type": "object",
            "properties": {
                "irr": {
                    "type": "number"
                },
                "mv": {
                    "description": "Portfolio market value",
                    "type": "number"
                },
                "pricePaid": {
                    "description": "Buy - Sell",
                    "type": "number"
                },
                "totalDividends": {
                    "description": "Total dividends",
                    "type": "number"
                }
            }
        },
        "portfolio.Position": {
            "type": "object",
            "properties": {
                "assetClass": {
                    "type": "string"
                },
                "assetSubClass": {
                    "type": "string"
                },
                "avgPx": {
                    "type": "number"
                },
                "book": {
                    "type": "string"
                },
                "ccy": {
                    "type": "string"
                },
                "dividends": {
                    "type": "number"
                },
                "fxRate": {
                    "type": "number"
                },
                "mv": {
                    "type": "number"
                },
                "pnL": {
                    "type": "number"
                },
                "px": {
                    "type": "number"
                },
                "qty": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "totalPaid": {
                    "type": "number"
                }
            }
        },
        "rdata.SuccessResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "rdata.TickerReference": {
            "type": "object",
            "required": [
                "asset_class",
                "ccy",
                "domicile",
                "id",
                "name",
                "underlying_ticker"
            ],
            "properties": {
                "asset_class": {
                    "type": "string"
                },
                "asset_sub_class": {
                    "type": "string"
                },
                "call_put": {
                    "type": "string",
                    "enum": [
                        "call",
                        "put"
                    ]
                },
                "category": {
                    "type": "string"
                },
                "ccy": {
                    "type": "string"
                },
                "coupon_rate": {
                    "type": "number"
                },
                "dividends_sg_ticker": {
                    "type": "string"
                },
                "domicile": {
                    "type": "string"
                },
                "google_ticker": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maturity_date": {
                    "type": "string"
                },
                "name": {
                    "type": "string"
                },
                "strike_price": {
                    "type": "number"
                },
                "sub_category": {
                    "type": "string"
                },
                "underlying_ticker": {
                    "type": "string"
                },
                "yahoo_ticker": {
                    "type": "string"
                }
            }
        },
        "types.AssetData": {
            "type": "object",
            "properties": {
                "currency": {
                    "type": "string"
                },
                "price": {
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "timestamp": {
                    "type": "integer"
                }
            }
        },
        "types.DividendsMetadata": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "avgInterest": {
                    "description": "SSB, TBills and Bonds only, in percentage",
                    "type": "number"
                },
                "exDate": {
                    "type": "string"
                },
                "interest": {
                    "description": "SSB, TBills and Bonds only, in percentage",
                    "type": "number"
                },
                "ticker": {
                    "type": "string"
                },
                "withholdingTax": {
                    "description": "in decimal, not percentage",
                    "type": "number"
                }
            }
        },
        "types.InterestRates": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "date": {
                    "type": "string"
                },
                "rate": {
                    "type": "number"
                },
                "rate_type": {
                    "type": "string"
                },
                "tenor": {
                    "type": "string"
                }
            }
        },
        "user.Profile": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        },
        "user.UpdateProfileRequest": {
            "type": "object",
            "properties": {
                "avatar": {
                    "type": "string"
                },
                "email": {
                    "type": "string"
                },
                "username": {
                    "type": "string"
                }
            }
        }
    }
}