basePath: /
definitions:
  blotter.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  blotter.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  blotter.Trade:
    properties:
      Account:
        description: Account associated with the trade (CDP, MIP, Custodian)
        type: string
      Broker:
        description: Broker who executed the trade
        type: string
      Price:
        description: Price per unit of the asset
        type: number
      Quantity:
        description: Quantity of the asset
        type: number
      SeqNum:
        description: Sequence number
        type: integer
      Side:
        description: Buy or Sell
        type: string
      Ticker:
        description: Ticker symbol of the asset
        type: string
      TradeDate:
        description: Date and time of the trade
        type: string
      TradeID:
        description: Unique identifier for the trade
        type: string
      Trader:
        description: Trader who executed the trade
        type: string
      Yield:
        description: Yield of the asset
        type: number
    required:
    - Account
    - Broker
    - Price
    - Quantity
    - Side
    - Ticker
    - TradeDate
    - Trader
    type: object
  blotter.TradeRequest:
    properties:
      account:
        type: string
      broker:
        type: string
      id:
        type: string
      price:
        type: number
      quantity:
        type: number
      seqNum:
        description: Sequence number
        type: integer
      side:
        type: string
      ticker:
        type: string
      tradeDate:
        type: string
      trader:
        type: string
      yield:
        type: number
    type: object
  dividends.Dividends:
    properties:
      amount:
        type: number
      amountPerShare:
        type: number
      exDate:
        type: string
    type: object
  portfolio.Position:
    properties:
      assetClass:
        type: string
      assetSubClass:
        type: string
      avgPx:
        type: number
      ccy:
        type: string
      dividends:
        type: number
      mv:
        type: number
      pnL:
        type: number
      qty:
        type: number
      ticker:
        type: string
      totalPaid:
        type: number
      trader:
        type: string
    type: object
  rdata.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  rdata.TickerReference:
    properties:
      asset_class:
        type: string
      asset_sub_class:
        type: string
      call_put:
        enum:
        - call
        - put
        type: string
      category:
        type: string
      ccy:
        type: string
      coupon_rate:
        type: number
      dividends_sg_ticker:
        type: string
      domicile:
        type: string
      google_ticker:
        type: string
      id:
        type: string
      maturity_date:
        type: string
      name:
        type: string
      strike_price:
        type: number
      sub_category:
        type: string
      underlying_ticker:
        type: string
      yahoo_ticker:
        type: string
    required:
    - asset_class
    - ccy
    - domicile
    - id
    - name
    - underlying_ticker
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for a portfolio manager.
  title: Portfolio Manager API
  version: "1.0"
paths:
  /api/v1/blotter/export:
    get:
      description: Export all trades to a CSV file
      produces:
      - text/csv
      responses:
        "200":
          description: trades.csv
          schema:
            type: file
        "500":
          description: Failed to export trades
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
      summary: Export trades to CSV
      tags:
      - trades
  /api/v1/blotter/import:
    post:
      consumes:
      - multipart/form-data
      description: Import trades from a CSV file
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Failed to get file from request
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
        "500":
          description: Failed to import trades
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
      summary: Import trades from CSV
      tags:
      - trades
  /api/v1/blotter/trade:
    delete:
      consumes:
      - application/json
      description: Delete all trades by ids from the blotter
      parameters:
      - description: Trade IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            $ref: '#/definitions/blotter.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
        "500":
          description: Failed to delete trades
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
      summary: Delete all trades by ids
      tags:
      - trades
    get:
      description: Retrieve all trades from the blotter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/blotter.Trade'
            type: array
      summary: Get all trades
      tags:
      - trades
    post:
      consumes:
      - application/json
      description: Add a new trade to the blotter
      parameters:
      - description: Trade Request
        in: body
        name: trade
        required: true
        schema:
          $ref: '#/definitions/blotter.TradeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/blotter.Trade'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
        "500":
          description: Failed to add trade
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
      summary: Add a new trade
      tags:
      - trades
    put:
      consumes:
      - application/json
      description: Update a trade in the blotter
      parameters:
      - description: Trade Request
        in: body
        name: trade
        required: true
        schema:
          $ref: '#/definitions/blotter.TradeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/blotter.Trade'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
        "500":
          description: Failed to update trade
          schema:
            $ref: '#/definitions/blotter.ErrorResponse'
      summary: Update a trade
      tags:
      - trades
  /api/v1/dividends:
    post:
      consumes:
      - application/json
      description: Get dividends for a single ticker
      parameters:
      - description: Ticker symbol
        in: body
        name: ticker
        required: true
        schema:
          type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dividends.Dividends'
            type: array
        "400":
          description: ticker is required
          schema:
            type: string
        "500":
          description: failed to calculate dividends
          schema:
            type: string
      summary: Get dividends for a single ticker
      tags:
      - dividends
  /api/v1/mdata/dividend/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves dividend history data for a specified stock ticker
      parameters:
      - description: Asset ticker symbol
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dividend data for the ticker
          schema: {}
        "400":
          description: Bad request - Ticker is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get dividend metadata for a ticker
      tags:
      - market-data
  /api/v1/mdata/price/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves current market data for a specified ticker
      parameters:
      - description: Ticker symbol (see reference data)
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Market data for the ticker
          schema: {}
        "400":
          description: Bad request - Ticker is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get market data for a single ticker
      tags:
      - market-data
  /api/v1/mdata/tickers/price:
    get:
      consumes:
      - application/json
      description: Retrieves current market data for multiple asset tickers
      parameters:
      - description: Comma-separated list of asset ticker symbols
        in: query
        name: tickers
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Market data for all requested tickers
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Tickers query parameter is required
          schema:
            type: string
      summary: Get market data for multiple tickers
      tags:
      - market-data
  /api/v1/portfolio/positions:
    get:
      description: Retrieves all positions currently in the portfolio
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/portfolio.Position'
            type: array
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get all portfolio positions
      tags:
      - portfolio
  /api/v1/refdata:
    delete:
      consumes:
      - application/json
      description: Deletes reference data by id
      parameters:
      - description: Reference data ids (underlying tickers)
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rdata.SuccessResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete reference data
      tags:
      - Reference
    get:
      description: Retrieves all reference data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get reference data
      tags:
      - Reference
    post:
      consumes:
      - application/json
      description: Adds reference data
      parameters:
      - description: Reference data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rdata.TickerReference'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add reference data
      tags:
      - Reference
    put:
      consumes:
      - application/json
      description: Updates reference data
      parameters:
      - description: Reference data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rdata.TickerReference'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rdata.TickerReference'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update reference data
      tags:
      - Reference
  /api/v1/refdata/export:
    get:
      description: Exports reference data in yaml format
      produces:
      - application/x-yaml
      responses:
        "200":
          description: refdata.yaml
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema: {}
      summary: Export reference data
      tags:
      - Reference
swagger: "2.0"
