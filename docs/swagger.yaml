basePath: /
definitions:
  analytics.AnalyzeFileRequest:
    properties:
      filePath:
        type: string
    required:
    - filePath
    type: object
  analytics.MostTradedStock:
    properties:
      institutionNetBuySellChange:
        description: Change from previous report
        type: number
      past5SessionsInstitutionNetSGDM:
        type: number
      sector:
        type: string
      stockCode:
        type: string
      stockName:
        type: string
      ytdAvgDailyTurnoverSGDM:
        type: number
      ytdInstitutionNetBuySellSGDM:
        type: number
    type: object
  analytics.MostTradedStocksReport:
    properties:
      extractedAt:
        type: integer
      filePath:
        type: string
      reportDate:
        type: string
      reportTitle:
        type: string
      stocks:
        items:
          $ref: '#/definitions/analytics.MostTradedStock'
        type: array
    type: object
  analytics.ReportAnalysis:
    properties:
      analysisDate:
        type: integer
      filePath:
        type: string
      keyInsights:
        items:
          type: string
        type: array
      metadata:
        additionalProperties:
          type: string
        type: object
      reportDate:
        type: integer
      reportTitle:
        type: string
      reportType:
        type: string
      summary:
        type: string
    type: object
  blotter.Trade:
    properties:
      Account:
        description: Account associated with the trade (CDP, MIP, Custodian)
        type: string
      Book:
        description: Book associated with the trade
        type: string
      Broker:
        description: Broker who executed the trade
        type: string
      Fx:
        description: FX rate for the trade
        type: number
      OrigTradeID:
        description: Original trade ID to link auto closed trades to the original
          trade
        type: string
      Price:
        description: Price per unit of the asset
        minimum: 0
        type: number
      Quantity:
        description: Quantity of the asset
        type: number
      SeqNum:
        description: Sequence number
        type: integer
      Side:
        description: Buy or Sell
        type: string
      Status:
        description: Status of the trade (e.g. Open, AutoClosed, Closed), autoclosed
          if the trade is closed by the system automatically upon expiry (e.g. MAS
          Bills), closed if the trade is closed manually
        type: string
      Ticker:
        description: Ticker symbol of the asset
        type: string
      TradeDate:
        description: Date and time of the trade
        type: string
      TradeID:
        description: Unique identifier for the trade
        type: string
      Yield:
        description: Yield of the asset
        type: number
    required:
    - Account
    - Book
    - Broker
    - Quantity
    - Side
    - Ticker
    - TradeDate
    type: object
  blotter.TradeRequest:
    properties:
      account:
        type: string
      book:
        type: string
      broker:
        type: string
      fx:
        type: number
      id:
        type: string
      origTradeID:
        type: string
      price:
        type: number
      quantity:
        type: number
      seqNum:
        description: Sequence number
        type: integer
      side:
        type: string
      status:
        type: string
      ticker:
        type: string
      tradeDate:
        type: string
      yield:
        type: number
    type: object
  common.ErrorResponse:
    properties:
      message:
        type: string
    type: object
  common.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  dividends.Dividends:
    properties:
      amount:
        type: number
      amountPerShare:
        type: number
      exDate:
        type: string
      qty:
        type: number
    type: object
  historical.DeleteMetricsRequest:
    properties:
      timestamps:
        items:
          type: string
        type: array
    type: object
  historical.DeleteMetricsResponse:
    properties:
      deleted:
        type: integer
      failed:
        type: integer
      failures:
        items:
          type: string
        type: array
    type: object
  historical.TimestampedMetrics:
    properties:
      metrics:
        $ref: '#/definitions/metrics.MetricsResult'
      timestamp:
        description: Only the date portion of this field will be used
        type: string
    type: object
  metrics.MetricsResult:
    properties:
      irr:
        type: number
      mv:
        description: Portfolio market value
        type: number
      pricePaid:
        description: Buy - Sell
        type: number
      totalDividends:
        description: Total dividends
        type: number
    type: object
  portfolio.Position:
    properties:
      assetClass:
        type: string
      assetSubClass:
        type: string
      avgPx:
        type: number
      book:
        type: string
      ccy:
        type: string
      dividends:
        type: number
      fxRate:
        type: number
      mv:
        type: number
      pnL:
        type: number
      px:
        type: number
      qty:
        type: number
      ticker:
        type: string
      totalPaid:
        type: number
    type: object
  rdata.SuccessResponse:
    properties:
      message:
        type: string
    type: object
  rdata.TickerReference:
    properties:
      asset_class:
        type: string
      asset_sub_class:
        type: string
      call_put:
        enum:
        - call
        - put
        type: string
      category:
        type: string
      ccy:
        type: string
      coupon_rate:
        type: number
      dividends_sg_ticker:
        type: string
      domicile:
        type: string
      google_ticker:
        type: string
      id:
        type: string
      maturity_date:
        type: string
      name:
        type: string
      strike_price:
        type: number
      sub_category:
        type: string
      underlying_ticker:
        type: string
      yahoo_ticker:
        type: string
    required:
    - asset_class
    - ccy
    - domicile
    - id
    - name
    - underlying_ticker
    type: object
  types.AssetData:
    properties:
      currency:
        type: string
      price:
        type: number
      ticker:
        type: string
      timestamp:
        type: integer
    type: object
  types.DividendsMetadata:
    properties:
      amount:
        type: number
      avgInterest:
        description: SSB, TBills and Bonds only, in percentage
        type: number
      exDate:
        type: string
      interest:
        description: SSB, TBills and Bonds only, in percentage
        type: number
      ticker:
        type: string
      withholdingTax:
        description: in decimal, not percentage
        type: number
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for a portfolio manager.
  title: Portfolio Manager API
  version: "1.0"
paths:
  /api/v1/analytics/analyze:
    post:
      consumes:
      - application/json
      description: Analyzes an existing file in the data directory
      parameters:
      - description: File analysis request
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/analytics.AnalyzeFileRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analytics.ReportAnalysis'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Analyze existing file
      tags:
      - analytics
  /api/v1/analytics/analyze_latest:
    get:
      consumes:
      - application/json
      description: Downloads and analyzes the latest N SGX reports from SGX. Optionally
        filter by report type and force reanalysis.
      parameters:
      - description: Number of latest reports to analyze
        in: query
        name: "n"
        required: true
        type: integer
      - description: Report type filter (e.g., 'fund%20flow', 'daily%20momentum').
          If not provided, analyzes all types.
        in: query
        name: type
        type: string
      - description: 'Force reanalysis even if analysis exists in database (default:
          false)'
        in: query
        name: force
        type: boolean
      produces:
      - application/json
      responses:
        "200":
          description: List of analysis results
          schema:
            items:
              $ref: '#/definitions/analytics.ReportAnalysis'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Analyze latest N SGX reports
      tags:
      - analytics
  /api/v1/analytics/download:
    get:
      consumes:
      - application/json
      description: Downloads the latest N SGX reports from SGX and stores them in
        the data directory. Optionally filter by report type.
      parameters:
      - description: Number of latest reports to download
        in: query
        name: "n"
        required: true
        type: integer
      - description: Report type filter (e.g., 'fund%20flow', 'daily%20momentum').
          If not provided, downloads all types.
        in: query
        name: type
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of downloaded report file paths
          schema:
            items:
              type: string
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Download latest N SGX reports
      tags:
      - analytics
  /api/v1/analytics/latest:
    get:
      consumes:
      - application/json
      description: Fetches the latest SGX report of a specific type, downloads it,
        and provides AI analysis
      parameters:
      - description: Report type (e.g., 'fund%20flow', 'daily%20momentum')
        in: query
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/analytics.ReportAnalysis'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get latest SGX report analysis by type
      tags:
      - analytics
  /api/v1/analytics/list:
    get:
      consumes:
      - application/json
      description: Lists all available SGX reports in the data directory
      produces:
      - application/json
      responses:
        "200":
          description: List of report file paths
          schema:
            items:
              type: string
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: List all available SGX reports
      tags:
      - analytics
  /api/v1/analytics/list_analysis:
    get:
      consumes:
      - application/json
      description: Lists all analysis reports that were previously stored in the database
      produces:
      - application/json
      responses:
        "200":
          description: List of analysis reports
          schema:
            items:
              $ref: '#/definitions/analytics.ReportAnalysis'
            type: array
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: List all available analysis reports
      tags:
      - analytics
  /api/v1/analytics/most_traded_stocks:
    get:
      consumes:
      - application/json
      description: Filters for SGX Fund Flow Weekly Tracker reports and extracts the
        "100 Most Traded Stocks" worksheet data
      parameters:
      - description: Limit results to latest n reports (0 or not provided means no
          limit)
        in: query
        name: "n"
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: List of 100 Most Traded Stocks reports
          schema:
            items:
              $ref: '#/definitions/analytics.MostTradedStocksReport'
            type: array
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Extract 100 Most Traded Stocks data from SGX Fund Flow reports
      tags:
      - analytics
  /api/v1/blotter/export:
    get:
      description: Export all trades to a CSV file
      produces:
      - text/csv
      responses:
        "200":
          description: trades_YYYYMMDD.csv
          schema:
            type: file
        "500":
          description: Failed to export trades
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Export trades to CSV
      tags:
      - trades
  /api/v1/blotter/export-with-fx:
    get:
      description: Export all trades as CSV with FX rates inferred where missing
      produces:
      - text/csv
      responses:
        "200":
          description: trades_with_fx.csv
          schema:
            type: file
        "500":
          description: Failed to export trades
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Export trades with inferred FX rates
      tags:
      - trades
  /api/v1/blotter/fx:
    get:
      description: Get current FX rates for all currencies in blotter trades
      produces:
      - application/json
      responses:
        "200":
          description: Map of currencies to their current FX rates
          schema:
            additionalProperties:
              type: number
            type: object
        "500":
          description: Failed to fetch FX rates
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get current FX rates
      tags:
      - fx
  /api/v1/blotter/import:
    post:
      consumes:
      - multipart/form-data
      description: Import trades from a CSV file
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Failed to get file from request
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to import trades
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Import trades from CSV
      tags:
      - trades
  /api/v1/blotter/import-ui:
    post:
      consumes:
      - multipart/form-data
      description: Import trades from a CSV file uploaded from the UI
      parameters:
      - description: CSV file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Trades imported successfully
          schema:
            $ref: '#/definitions/common.SuccessResponse'
        "400":
          description: Invalid file or format
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Server error processing import
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Import trades from CSV upload
      tags:
      - trades
  /api/v1/blotter/trade:
    delete:
      consumes:
      - application/json
      description: Delete all trades by ids from the blotter
      parameters:
      - description: Trade IDs
        in: body
        name: ids
        required: true
        schema:
          items:
            type: integer
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            $ref: '#/definitions/common.SuccessResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to delete trades
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete all trades by ids
      tags:
      - trades
    get:
      description: Retrieve all trades from the blotter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/blotter.Trade'
            type: array
      summary: Get all trades
      tags:
      - trades
    post:
      consumes:
      - application/json
      description: Add a new trade to the blotter
      parameters:
      - description: Trade Request
        in: body
        name: trade
        required: true
        schema:
          $ref: '#/definitions/blotter.TradeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/blotter.Trade'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to add trade
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Add a new trade
      tags:
      - trades
    put:
      consumes:
      - application/json
      description: Update a trade in the blotter
      parameters:
      - description: Trade Request
        in: body
        name: trade
        required: true
        schema:
          $ref: '#/definitions/blotter.TradeRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/blotter.Trade'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to update trade
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Update a trade
      tags:
      - trades
  /api/v1/blotter/trade/all:
    delete:
      description: Delete all trades from the blotter
      produces:
      - application/json
      responses:
        "200":
          description: message
          schema:
            $ref: '#/definitions/common.SuccessResponse'
        "500":
          description: Failed to delete all trades
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete all trades
      tags:
      - trades
  /api/v1/dividends:
    get:
      consumes:
      - application/json
      description: Get dividends for all tickers
      produces:
      - application/json
      responses:
        "200":
          description: Mapping of ticker to dividends
          schema:
            additionalProperties:
              items:
                $ref: '#/definitions/dividends.Dividends'
              type: array
            type: object
        "500":
          description: failed to calculate dividends
          schema:
            type: string
      summary: Get dividends for all tickers
      tags:
      - dividends
  /api/v1/dividends/{ticker}:
    get:
      consumes:
      - application/json
      description: Get dividends for a single ticker
      parameters:
      - description: Asset ticker symbol
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dividends.Dividends'
            type: array
        "500":
          description: failed to calculate dividends
          schema:
            type: string
      summary: Get dividends for a single ticker
      tags:
      - dividends
  /api/v1/historical/metrics:
    get:
      description: Get all historical portfolio metrics (date-stamped portfolio metrics)
      produces:
      - application/json
      responses:
        "200":
          description: List of historical portfolio metrics by date
          schema:
            items:
              $ref: '#/definitions/historical.TimestampedMetrics'
            type: array
        "500":
          description: Failed to get historical metrics
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get historical portfolio metrics
      tags:
      - historical
    post:
      consumes:
      - application/json
      description: Insert or update a single historical portfolio metric (date-stamped
        portfolio metric)
      parameters:
      - description: Historical metric
        in: body
        name: metric
        required: true
        schema:
          $ref: '#/definitions/historical.TimestampedMetrics'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/historical.TimestampedMetrics'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to upsert historical metric
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Upsert a historical portfolio metric
      tags:
      - historical
    put:
      consumes:
      - application/json
      description: Insert or update a single historical portfolio metric (date-stamped
        portfolio metric)
      parameters:
      - description: Historical metric
        in: body
        name: metric
        required: true
        schema:
          $ref: '#/definitions/historical.TimestampedMetrics'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/historical.TimestampedMetrics'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to upsert historical metric
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Upsert a historical portfolio metric
      tags:
      - historical
  /api/v1/historical/metrics/delete:
    post:
      consumes:
      - application/json
      description: Delete one or more historical portfolio metrics by their timestamps
      parameters:
      - description: List of timestamps to delete
        in: body
        name: request
        required: true
        schema:
          $ref: '#/definitions/historical.DeleteMetricsRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Result of the deletion operation
          schema:
            $ref: '#/definitions/historical.DeleteMetricsResponse'
        "400":
          description: Invalid request payload
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to delete historical metrics
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete historical portfolio metrics
      tags:
      - historical
  /api/v1/historical/metrics/export:
    get:
      description: Export all historical portfolio metrics (date-stamped portfolio
        metrics) as a CSV file
      produces:
      - text/csv
      responses:
        "200":
          description: CSV file with historical metrics
          schema:
            type: string
        "500":
          description: Failed to export historical metrics
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Export historical portfolio metrics as CSV
      tags:
      - historical
  /api/v1/historical/metrics/import:
    post:
      consumes:
      - multipart/form-data
      description: Import historical portfolio metrics (date-stamped portfolio metrics)
        from a CSV file
      parameters:
      - description: CSV file to import
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Import result
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Invalid file or format
          schema:
            $ref: '#/definitions/common.ErrorResponse'
        "500":
          description: Failed to import historical metrics
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Import historical portfolio metrics from CSV
      tags:
      - historical
  /api/v1/mdata/dividends/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves dividend history data for a specified stock ticker
      parameters:
      - description: Asset ticker symbol
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Dividend data for the ticker
          schema: {}
        "400":
          description: Bad request - Ticker is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get dividend metadata for a ticker
      tags:
      - market-data
    post:
      consumes:
      - application/json
      description: Stores user-provided dividend history data for a specified stock
        ticker
      parameters:
      - description: Asset ticker symbol
        in: path
        name: ticker
        required: true
        type: string
      - description: Array of dividend metadata to store
        in: body
        name: dividend_data
        required: true
        schema:
          items:
            $ref: '#/definitions/types.DividendsMetadata'
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: Dividends metadata stored successfully
          schema:
            $ref: '#/definitions/common.SuccessResponse'
        "400":
          description: Bad request - Ticker is required or invalid request body
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Store custom dividend metadata for a ticker
      tags:
      - market-data
  /api/v1/mdata/dividends/import:
    post:
      consumes:
      - multipart/form-data
      description: Handles the import of dividend data from an uploaded CSV file for
        a multiple tickers
      parameters:
      - description: CSV file containing dividend data
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: Successfully imported dividends data
          schema:
            $ref: '#/definitions/common.SuccessResponse'
        "400":
          description: Bad request - Invalid form data
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Import dividend data from CSV stream
      tags:
      - market-data
  /api/v1/mdata/price/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves current market data for a specified ticker
      parameters:
      - description: Ticker symbol (see reference data)
        in: path
        name: ticker
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Market data for the ticker
          schema: {}
        "400":
          description: Bad request - Ticker is required
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get market data for a single ticker
      tags:
      - market-data
  /api/v1/mdata/price/historical/{ticker}:
    get:
      consumes:
      - application/json
      description: Retrieves historical price data for a specified ticker between
        start and end dates
      parameters:
      - description: Ticker symbol (see reference data)
        in: path
        name: ticker
        required: true
        type: string
      - description: Start date in YYYYMMDD format
        in: query
        name: start
        required: true
        type: string
      - description: End date in YYYYMMDD format (defaults to today)
        in: query
        name: end
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Historical price data for the ticker
          schema:
            items:
              $ref: '#/definitions/types.AssetData'
            type: array
        "400":
          description: Bad request - Invalid parameters
          schema:
            type: string
        "500":
          description: Internal server error
          schema:
            type: string
      summary: Get historical price data for a ticker
      tags:
      - market-data
  /api/v1/mdata/tickers/price:
    get:
      consumes:
      - application/json
      description: Retrieves current market data for multiple asset tickers
      parameters:
      - description: Comma-separated list of asset ticker symbols
        in: query
        name: tickers
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Market data for all requested tickers
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad request - Tickers query parameter is required
          schema:
            type: string
      summary: Get market data for multiple tickers
      tags:
      - market-data
  /api/v1/metrics:
    get:
      description: Get the Internal Rate of Return (IRR), MV, Price Paid for the entire
        portfolio
      produces:
      - application/json
      responses:
        "200":
          description: The portfolio metrics, including IRR, cash flows and others
          schema:
            $ref: '#/definitions/metrics.MetricsResult'
        "500":
          description: Failed to calculate portoflio metrics
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get portfolio IRR
      tags:
      - metrics
  /api/v1/portfolio/cleanup:
    post:
      description: Closes positions that have expired without a corresponding closure
        trade
      produces:
      - application/json
      responses:
        "200":
          description: Trade Ids of closed trades
          schema:
            items:
              items:
                type: string
              type: array
            type: array
        "500":
          description: Failed to auto close positions
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Close positions that have expired
      tags:
      - portfolio
  /api/v1/portfolio/positions:
    delete:
      description: Deletes all positions currently in the portfolio
      produces:
      - application/json
      responses:
        "200":
          description: Positions deleted successfully
          schema:
            type: string
        "500":
          description: Failed to delete positions
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Delete all portfolio positions
      tags:
      - portfolio
    get:
      description: Retrieves all positions currently in the portfolio
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/portfolio.Position'
            type: array
        "500":
          description: Failed to get positions
          schema:
            $ref: '#/definitions/common.ErrorResponse'
      summary: Get all portfolio positions
      tags:
      - portfolio
  /api/v1/refdata:
    delete:
      consumes:
      - application/json
      description: Deletes reference data by id
      parameters:
      - description: Reference data ids (underlying tickers)
        in: body
        name: body
        required: true
        schema:
          items:
            type: string
          type: array
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rdata.SuccessResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Delete reference data
      tags:
      - Reference
    get:
      description: Retrieves all reference data
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "500":
          description: Internal Server Error
          schema: {}
      summary: Get reference data
      tags:
      - Reference
    post:
      consumes:
      - application/json
      description: Adds reference data
      parameters:
      - description: Reference data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rdata.TickerReference'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Add reference data
      tags:
      - Reference
    put:
      consumes:
      - application/json
      description: Updates reference data
      parameters:
      - description: Reference data
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rdata.TickerReference'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/rdata.TickerReference'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Update reference data
      tags:
      - Reference
  /api/v1/refdata/export:
    get:
      description: Exports reference data in yaml format
      produces:
      - application/x-yaml
      responses:
        "200":
          description: refdata.yaml
          schema:
            type: file
        "500":
          description: Internal Server Error
          schema: {}
      summary: Export reference data
      tags:
      - Reference
  /api/v1/refdata/import:
    post:
      consumes:
      - multipart/form-data
      description: Imports reference data from a YAML file
      parameters:
      - description: YAML file
        in: formData
        name: file
        required: true
        type: file
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/rdata.SuccessResponse'
        "400":
          description: Bad Request
          schema: {}
        "500":
          description: Internal Server Error
          schema: {}
      summary: Import reference data
      tags:
      - Reference
  /healthz:
    get:
      description: Returns a simple message to indicate that the server is up and
        running
      produces:
      - text/plain
      responses:
        "200":
          description: I'm up!
          schema:
            type: string
      summary: Health check
      tags:
      - health
swagger: "2.0"
